==== Pass 1: Parsing input and building AST ====
New ScopeTable with ID 1 created

At line no: 1 type_specifier : INT 

int

New ScopeTable with ID 2 created

At line no: 2 type_specifier : INT 

int

At line no: 2 declaration_list : ID 

a

At line no: 2 var_declaration : type_specifier declaration_list SEMICOLON 

int a;

At line no: 2 statement : var_declaration 

int a;

At line no: 2 statements : statement 

int a;

At line no: 4 variable : ID 

a

At line no: 4 factor : variable 

a

At line no: 4 unary_expression : factor 

a

At line no: 4 term : unary_expression 

a

At line no: 4 simple_expression : term 

a

At line no: 4 factor : CONST_INT 

1

At line no: 4 unary_expression : factor 

1

At line no: 4 term : unary_expression 

1

At line no: 4 simple_expression : term 

1

At line no: 4 rel_expression : simple_expression RELOP simple_expression 

a>1

At line no: 4 logic_expression : rel_expression 

a>1

At line no: 4 expression : logic_expression 

a>1

New ScopeTable with ID 3 created

At line no: 5 type_specifier : FLOAT 

float

At line no: 5 declaration_list : ID 

a

At line no: 5 var_declaration : type_specifier declaration_list SEMICOLON 

float a;

At line no: 5 statement : var_declaration 

float a;

At line no: 5 statements : statement 

float a;

At line no: 7 variable : ID 

a

At line no: 7 factor : variable 

a

At line no: 7 unary_expression : factor 

a

At line no: 7 term : unary_expression 

a

At line no: 7 simple_expression : term 

a

At line no: 7 factor : CONST_INT 

1

At line no: 7 unary_expression : factor 

1

At line no: 7 term : unary_expression 

1

At line no: 7 simple_expression : term 

1

At line no: 7 rel_expression : simple_expression RELOP simple_expression 

a>1

At line no: 7 logic_expression : rel_expression 

a>1

At line no: 7 expression : logic_expression 

a>1

New ScopeTable with ID 4 created

At line no: 8 type_specifier : INT 

int

At line no: 8 declaration_list : ID 

a

At line no: 8 var_declaration : type_specifier declaration_list SEMICOLON 

int a;

At line no: 8 statement : var_declaration 

int a;

At line no: 8 statements : statement 

int a;

At line no: 10 variable : ID 

a

At line no: 10 factor : variable 

a

At line no: 10 unary_expression : factor 

a

At line no: 10 term : unary_expression 

a

At line no: 10 simple_expression : term 

a

At line no: 10 factor : CONST_INT 

1

At line no: 10 unary_expression : factor 

1

At line no: 10 term : unary_expression 

1

At line no: 10 simple_expression : term 

1

At line no: 10 rel_expression : simple_expression RELOP simple_expression 

a>1

At line no: 10 logic_expression : rel_expression 

a>1

At line no: 10 expression : logic_expression 

a>1

New ScopeTable with ID 5 created

At line no: 11 type_specifier : FLOAT 

float

At line no: 11 declaration_list : ID 

a

At line no: 11 var_declaration : type_specifier declaration_list SEMICOLON 

float a;

At line no: 11 statement : var_declaration 

float a;

At line no: 11 statements : statement 

float a;

At line no: 13 variable : ID 

a

At line no: 13 factor : variable 

a

At line no: 13 unary_expression : factor 

a

At line no: 13 term : unary_expression 

a

At line no: 13 simple_expression : term 

a

At line no: 13 factor : CONST_INT 

1

At line no: 13 unary_expression : factor 

1

At line no: 13 term : unary_expression 

1

At line no: 13 simple_expression : term 

1

At line no: 13 rel_expression : simple_expression RELOP simple_expression 

a>1

At line no: 13 logic_expression : rel_expression 

a>1

At line no: 13 expression : logic_expression 

a>1

New ScopeTable with ID 6 created

At line no: 14 type_specifier : INT 

int

At line no: 14 declaration_list : ID 

a

At line no: 14 var_declaration : type_specifier declaration_list SEMICOLON 

int a;

At line no: 14 statement : var_declaration 

int a;

At line no: 14 statements : statement 

int a;

At line no: 16 variable : ID 

a

At line no: 16 factor : variable 

a

At line no: 16 unary_expression : factor 

a

At line no: 16 term : unary_expression 

a

At line no: 16 simple_expression : term 

a

At line no: 16 factor : CONST_INT 

1

At line no: 16 unary_expression : factor 

1

At line no: 16 term : unary_expression 

1

At line no: 16 simple_expression : term 

1

At line no: 16 rel_expression : simple_expression RELOP simple_expression 

a>1

At line no: 16 logic_expression : rel_expression 

a>1

At line no: 16 expression : logic_expression 

a>1

New ScopeTable with ID 7 created

At line no: 16 type_specifier : FLOAT 

float

At line no: 16 declaration_list : ID 

a

At line no: 16 var_declaration : type_specifier declaration_list SEMICOLON 

float a;

At line no: 16 statement : var_declaration 

float a;

At line no: 16 statements : statement 

float a;

At line no: 16 compound_statement : LCURL statements RCURL 

{
float a;
}

################################

ScopeTable # 7
7 --> 
< a : ID >
Variable
Type: float


ScopeTable # 6
7 --> 
< a : ID >
Variable
Type: int


ScopeTable # 5
7 --> 
< a : ID >
Variable
Type: float


ScopeTable # 4
7 --> 
< a : ID >
Variable
Type: int


ScopeTable # 3
7 --> 
< a : ID >
Variable
Type: float


ScopeTable # 2
7 --> 
< a : ID >
Variable
Type: int


ScopeTable # 1
8 --> 
< func : ID >
Function Definition
Return Type: int
Number of Parameters: 0
Parameter Details: 

################################

Scopetable with ID 7 removed

At line no: 16 statement : compound_statement 

{
float a;
}

At line no: 17 statement : IF LPAREN expression RPAREN statement 

if(a>1)
{
float a;
}

At line no: 17 statements : statements statement 

int a;
if(a>1)
{
float a;
}

At line no: 17 compound_statement : LCURL statements RCURL 

{
int a;
if(a>1)
{
float a;
}
}

################################

ScopeTable # 6
7 --> 
< a : ID >
Variable
Type: int


ScopeTable # 5
7 --> 
< a : ID >
Variable
Type: float


ScopeTable # 4
7 --> 
< a : ID >
Variable
Type: int


ScopeTable # 3
7 --> 
< a : ID >
Variable
Type: float


ScopeTable # 2
7 --> 
< a : ID >
Variable
Type: int


ScopeTable # 1
8 --> 
< func : ID >
Function Definition
Return Type: int
Number of Parameters: 0
Parameter Details: 

################################

Scopetable with ID 6 removed

At line no: 17 statement : compound_statement 

{
int a;
if(a>1)
{
float a;
}
}

At line no: 18 statement : IF LPAREN expression RPAREN statement 

if(a>1)
{
int a;
if(a>1)
{
float a;
}
}

At line no: 18 statements : statements statement 

float a;
if(a>1)
{
int a;
if(a>1)
{
float a;
}
}

At line no: 18 compound_statement : LCURL statements RCURL 

{
float a;
if(a>1)
{
int a;
if(a>1)
{
float a;
}
}
}

################################

ScopeTable # 5
7 --> 
< a : ID >
Variable
Type: float


ScopeTable # 4
7 --> 
< a : ID >
Variable
Type: int


ScopeTable # 3
7 --> 
< a : ID >
Variable
Type: float


ScopeTable # 2
7 --> 
< a : ID >
Variable
Type: int


ScopeTable # 1
8 --> 
< func : ID >
Function Definition
Return Type: int
Number of Parameters: 0
Parameter Details: 

################################

Scopetable with ID 5 removed

At line no: 18 statement : compound_statement 

{
float a;
if(a>1)
{
int a;
if(a>1)
{
float a;
}
}
}

At line no: 19 statement : IF LPAREN expression RPAREN statement 

if(a>1)
{
float a;
if(a>1)
{
int a;
if(a>1)
{
float a;
}
}
}

At line no: 19 statements : statements statement 

int a;
if(a>1)
{
float a;
if(a>1)
{
int a;
if(a>1)
{
float a;
}
}
}

At line no: 19 compound_statement : LCURL statements RCURL 

{
int a;
if(a>1)
{
float a;
if(a>1)
{
int a;
if(a>1)
{
float a;
}
}
}
}

################################

ScopeTable # 4
7 --> 
< a : ID >
Variable
Type: int


ScopeTable # 3
7 --> 
< a : ID >
Variable
Type: float


ScopeTable # 2
7 --> 
< a : ID >
Variable
Type: int


ScopeTable # 1
8 --> 
< func : ID >
Function Definition
Return Type: int
Number of Parameters: 0
Parameter Details: 

################################

Scopetable with ID 4 removed

At line no: 19 statement : compound_statement 

{
int a;
if(a>1)
{
float a;
if(a>1)
{
int a;
if(a>1)
{
float a;
}
}
}
}

At line no: 20 statement : IF LPAREN expression RPAREN statement 

if(a>1)
{
int a;
if(a>1)
{
float a;
if(a>1)
{
int a;
if(a>1)
{
float a;
}
}
}
}

At line no: 20 statements : statements statement 

float a;
if(a>1)
{
int a;
if(a>1)
{
float a;
if(a>1)
{
int a;
if(a>1)
{
float a;
}
}
}
}

At line no: 20 compound_statement : LCURL statements RCURL 

{
float a;
if(a>1)
{
int a;
if(a>1)
{
float a;
if(a>1)
{
int a;
if(a>1)
{
float a;
}
}
}
}
}

################################

ScopeTable # 3
7 --> 
< a : ID >
Variable
Type: float


ScopeTable # 2
7 --> 
< a : ID >
Variable
Type: int


ScopeTable # 1
8 --> 
< func : ID >
Function Definition
Return Type: int
Number of Parameters: 0
Parameter Details: 

################################

Scopetable with ID 3 removed

At line no: 20 statement : compound_statement 

{
float a;
if(a>1)
{
int a;
if(a>1)
{
float a;
if(a>1)
{
int a;
if(a>1)
{
float a;
}
}
}
}
}

At line no: 21 statement : IF LPAREN expression RPAREN statement 

if(a>1)
{
float a;
if(a>1)
{
int a;
if(a>1)
{
float a;
if(a>1)
{
int a;
if(a>1)
{
float a;
}
}
}
}
}

At line no: 21 statements : statements statement 

int a;
if(a>1)
{
float a;
if(a>1)
{
int a;
if(a>1)
{
float a;
if(a>1)
{
int a;
if(a>1)
{
float a;
}
}
}
}
}

At line no: 21 compound_statement : LCURL statements RCURL 

{
int a;
if(a>1)
{
float a;
if(a>1)
{
int a;
if(a>1)
{
float a;
if(a>1)
{
int a;
if(a>1)
{
float a;
}
}
}
}
}
}

################################

ScopeTable # 2
7 --> 
< a : ID >
Variable
Type: int


ScopeTable # 1
8 --> 
< func : ID >
Function Definition
Return Type: int
Number of Parameters: 0
Parameter Details: 

################################

Scopetable with ID 2 removed

At line no: 21 func_definition : type_specifier ID LPAREN RPAREN compound_statement 

int func()
{
int a;
if(a>1)
{
float a;
if(a>1)
{
int a;
if(a>1)
{
float a;
if(a>1)
{
int a;
if(a>1)
{
float a;
}
}
}
}
}
}

At line no: 21 unit : func_definition 

int func()
{
int a;
if(a>1)
{
float a;
if(a>1)
{
int a;
if(a>1)
{
float a;
if(a>1)
{
int a;
if(a>1)
{
float a;
}
}
}
}
}
}

At line no: 21 program : unit 

int func()
{
int a;
if(a>1)
{
float a;
if(a>1)
{
int a;
if(a>1)
{
float a;
if(a>1)
{
int a;
if(a>1)
{
float a;
}
}
}
}
}
}

At line no: 21 start : program 

Symbol Table

################################

ScopeTable # 1
8 --> 
< func : ID >
Function Definition
Return Type: int
Number of Parameters: 0
Parameter Details: 

################################


Symbol Table after first pass:
################################

ScopeTable # 1
8 --> 
< func : ID >
Function Definition
Return Type: int
Number of Parameters: 0
Parameter Details: 

################################


==== Pass 2: Generating Three-Address Code from AST ====
Generating Three-Address Code...
Three-Address Code Generation Complete

Total lines: 21
Total errors: 0
